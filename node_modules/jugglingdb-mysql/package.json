{
  "name": "jugglingdb-mysql",
  "version": "0.0.1-7",
  "description": "MySQL adapter for JugglingDB",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "dependencies": {
    "jugglingdb": ">= 0.2.0",
    "mysql": ">= 2.0.0-alpha3"
  },
  "devDependencies": {
    "coffee-script": "latest",
    "should": "~1.2.2",
    "mocha": "~1.8.2",
    "semicov": "*"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/1602/jugglingdb-mysql.git"
  },
  "author": {
    "name": "Anatoliy Chakkaev",
    "email": "mail@anatoliy.in"
  },
  "maintainers": [
    {
      "name": "dgsan",
      "url": "https://github.com/dgsan"
    },
    {
      "name": "Anatoliy Chakkaev",
      "url": "https://github.com/1602"
    }
  ],
  "license": "MIT",
  "readme": "## JugglingDB-MySQL [![Build Status](https://travis-ci.org/jugglingdb/mysql-adapter.png)](https://travis-ci.org/jugglingdb/mysql-adapter)\n\nMySQL adapter for JugglingDB.\n\n## Usage\n\nTo use it you need `jugglingdb@0.2.x`.\n\n1. Setup dependencies in `package.json`:\n\n    ```json\n    {\n      ...\n      \"dependencies\": {\n        \"jugglingdb\": \"0.2.x\",\n        \"jugglingdb-mysql\": \"latest\"\n      },\n      ...\n    }\n    ```\n\n2. Use:\n\n    ```javascript\n        var Schema = require('jugglingdb').Schema;\n        var schema = new Schema('mysql', {\n            database: 'myapp_test',\n            username: 'root'\n        });\n    ```\n    You can optionally pass a few additional parameters supported by `node-mysql`, most particularly `password` and `collation`. `Collation` currently defaults to `utf8mb4_general_ci`. The `collation` value will also be used to derive the connection charset.\n\n## Running tests\n\n    npm test\n    \n## Using the `dataType` field/column option with MySQL\n\nThe jugglingdb MySQL adapter now supports using the `dataType`  column/property attribute to specify what MySQL column type is used for many jugglingdb types.\n\nThe following type-dataType combinations are supported:\n* <h4> Number </h4>\n  * <h5> integer </h5>\n     * tinyint\n     * smallint\n     * mediumint\n     * int\n     * bigint\n     \n     Use the `limit` option to alter the display width.\n\n     Example:\n      `{ count : { type: Number, dataType: 'smallInt' }}`\n\n  * <h5> floating point types </h5>\n     * float\n     * double\n     \n     Use the `precision` and `scale` options to specify custom precision. Default is (16,8).\n\n     Example:\n      `{ average : { type: Number, dataType: 'float', precision: 20, scale: 4 }}`\n\n  * <h5> fixed-point exact value types </h5>\n     * decimal\n     * numeric\n\n     Use the `precision` and `scale` options to specify custom precision. Default is (9,2).\n     \n     These aren't likely to function as true fixed-point.\n     \n     Example:\n      `{ stdDev : { type: Number, dataType: 'decimal', precision: 12, scale: 8 }}`\n\n* <h4> String / Schema.Text / Schema.JSON </h4>\n  * varchar\n  * char\n  * text\n  * mediumtext\n  * tinytext\n  * longtext\n  \n  Example:\n   `{ userName : { type: String, dataType: 'char', limit: 24 }}`\n\n  Example:\n   `{ biography : { type: String, dataType: 'longtext' }}`\n\n* <h4> Date </h4>\n  * datetime\n  * timestamp\n  \n  Example:\n   `{ startTime : { type: Date, dataType: 'timestamp' }}`\n\n* <h4> Enum </h4>\n  Enums are special.\n  Create an Enum using Enum factory:\n\n```javascript\n    var MOOD = schema.EnumFactory('glad', 'sad', 'mad');\n    MOOD.SAD;    // 'sad'\n    MOOD(2);     // 'sad'\n    MOOD('SAD'); // 'sad'\n    MOOD('sad'); // 'sad'\n```\n  \n  * `{ mood: { type: MOOD }}`\n  * `{ choice: { type: schema.EnumFactory('yes', 'no', 'maybe'), null: false }}`\n\n\n## MIT License\n\n```text\nCopyright (C) 2012 by Anatoliy Chakkaev\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n```\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\n```text\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/1602/jugglingdb-mysql/issues"
  },
  "_id": "jugglingdb-mysql@0.0.1-7",
  "_from": "jugglingdb-mysql@latest"
}
